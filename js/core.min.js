function renderContent() {
	function e(e) {
		const t = document.getElementById("main-menu");
		if (!t) return;
		const n = e.map(e => {
			const t = e.id ? "#" + e.id : "#" + e.title;
			if (e.children) {
				const t = e.children.map(e => {
					const t = e.id ? "#" + e.id : "#" + e.title;
					return `<li><a href="${t}" class="smooth"><span class="title">${e.title}</span></a></li>`
				}).join("");
				return `<li><a><i class="${e.icon}"></i> <span class="title">${e.title}</span></a><ul>${t}</ul></li>`
			}
			return `<li><a href="${t}" class="smooth"><i class="${e.icon}"></i> <span class="title">${e.title}</span></a></li>`
		}).join("");
		t.innerHTML = n
	}

	function t(e) {
		const t = document.getElementById("search-container");
		if (!e || !t) return;
		const {
			categoriesHTML: n,
			providersHTML: s
		} = e.reduce((e, t, n) => {
				const s = 0 === n ? "active" : "";
				e.categoriesHTML +=
					`\n                    <div class="category-tab ${s}" data-category="${t.groupName}">${t.groupName}</div>`;
				const i = t.items.map(e => `<div class="provider-item" data-id="${e.id}">${e.name}</div>`).join("");
				return e.providersHTML +=
					`\n                    <div class="provider-list ${s}" data-category-content="${t.groupName}">${i}</div>`,
					e
			}, {
				categoriesHTML: "",
				providersHTML: ""
			}), i =
			`\n            <div class="search-bar glass-effect bcorder" id="search-bar">\n                <div class="selected-engine" id="selected-engine"></div>\n                <input type="text" id="search-text" autocomplete="off">\n                <button type="submit"><i class="ti ti-search"></i></button>\n            </div>\n            <div class="search-options-panel glass-effect bcorder" id="search-options-panel">\n                <div class="search-categories">${n}</div>\n                <div class="search-providers">${s}</div>\n            </div>\n        `;
		t.innerHTML = i
	}

	function n(e) {
		const t = document.getElementById("dynamic-content-container");
		if (!t) return;
		let n = "";
		e.forEach(e => {
			const t = e => {
				if (!e.items) return "";
				const t = e.items.map(e => {
					let t = "images/browser.svg";
					try {
						const n = new URL(e.url).hostname;
						t = `https://api.xinac.net/icon/?url=${n}`
					} catch (e) {}
					return `\n                        <div class="col-6 col-sm-6 col-md-4 col-lg-3 col-xl-2w col-xxl-2">\n                            <div class="w-widget box2 glass-effect bcorder" data-url="${e.url}" data-bs-toggle="tooltip" data-bs-placement="bottom" title="${e.url}">\n                                <div class="w-comment-entry">\n                                    <a><img data-src="${t}" class="lozad img-circle" onerror="this.onerror=null;this.src='images/browser.svg';"></a>\n                                    <div class="w-comment">\n                                        <a class="overflowClip_1"><strong>${e.title}</strong></a>\n                                        <p class="overflowClip_2">${e.description}</p>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>`
				}).join("");
				return `<h6 class="tag" id="${e.title}"><i class="ti ti-tag"></i>${e.title}</h6><div class="row">${t}</div><br />`
			};
			e.children ? e.children.forEach(e => {
				n += t(e)
			}) : n += t(e)
		}), t.innerHTML = n
	}

	function s(e) {
		const t = {
			form: document.getElementById("super-search-fm"),
			container: document.getElementById("search-container"),
			bar: document.getElementById("search-bar"),
			input: document.getElementById("search-text"),
			engineDisplay: document.getElementById("selected-engine"),
			panel: document.getElementById("search-options-panel"),
			categoryTabsContainer: document.querySelector(".search-categories"),
			providerListsContainer: document.querySelector(".search-providers")
		};
		if (Object.values(t).some(e => !e)) return void console.error("关键搜索元素未在DOM中找到，无法绑定事件。");
		const n = new Map;
		e.forEach(e => {
			e.items.forEach(e => n.set(e.id, e))
		});
		const s = e => {
			const i = n.get(e);
			if (i) t.input.placeholder = i.placeholder, t.form.action = i.url, t.engineDisplay.innerHTML =
				`<div class="icon-wrapper">${i.name}</div>`, t.panel.querySelectorAll(".provider-item").forEach(
				t => {
					t.classList.toggle("selected", t.dataset.id === e)
				}), localStorage.setItem("searchEngineId", e);
			else {
				const e = n.values().next().value;
				e && s(e.id)
			}
		};
		t.engineDisplay.addEventListener("click", e => {
			t.panel.classList.toggle("active"), t.bar.classList.toggle("focused"), e.stopPropagation()
		}), document.addEventListener("click", e => {
			t.container.contains(e.target) || (t.panel.classList.remove("active"), t.bar.classList.remove(
				"focused"))
		}), t.panel.addEventListener("click", e => {
			const n = e.target.closest(".category-tab");
			if (n) {
				const e = n.dataset.category;
				t.categoryTabsContainer.querySelectorAll(".category-tab").forEach(e => e.classList.remove(
					"active")), n.classList.add("active"), t.providerListsContainer.querySelectorAll(
					".provider-list").forEach(t => {
					t.classList.toggle("active", t.dataset.categoryContent === e)
				})
			}
			const i = e.target.closest(".provider-item");
			i && (s(i.dataset.id), t.input.focus(), t.panel.classList.remove("active"), t.bar.classList.remove(
				"focused"))
		}), t.form.addEventListener("submit", e => {
			e.preventDefault();
			const n = t.input.value.trim();
			if (n) {
				const e = `${t.form.action}${encodeURIComponent(n)}`;
				window.open(e, "_blank")
			}
		});
		const i = localStorage.getItem("searchEngineId");
		if (i && n.has(i)) {
			s(i);
			n.get(i);
			const t = e.find(e => e.items.some(e => e.id === i));
			if (t) {
				const e = document.querySelector(`.category-tab[data-category="${t.groupName}"]`);
				e && e.click()
			}
		} else {
			const e = n.values().next().value;
			if (e) {
				s(e.id);
				const t = document.querySelector(".category-tab");
				t && t.click()
			}
		}
	}

	function i() {
		if ("function" == typeof lozad) {
			const e = lozad();
			e.observe()
		}
		if ("undefined" != typeof bootstrap) {
			const e = Array.from(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
			e.forEach(e => {
				new bootstrap.Tooltip(e)
			})
		}
	}
	fetch("js/data.json").then(e => {
		if (!e.ok) throw new Error(`HTTP 错误！状态: ${e.status}. 无法加载 'js/data.json'`);
		return e.json()
	}).then(o => {
		if (!o || !o.pageData) throw new Error("JSON 数据格式不正确或缺少必要的配置部分。");
		const a = o.pageData.find(e => "search" === e.id),
			r = a ? a.searchConfig : null;
		if (!r) throw new Error("在 pageData 中未找到有效的 searchConfig。");
		e(o.pageData), n(o.pageData), t(r), s(r), i(), setupSidebarMenu(), setupSidebarToggles()
	}).catch(e => {
		console.error("严重错误:", e);
		const t = document.getElementById("dynamic-content-container");
		t && (t.innerHTML = '<p style="text-align: center; color: red;">加载内容失败！请按F12查看控制台中的详细错误信息。</p>')
	})
}

function initializePageFunctions() {
	Object.assign(public_vars, {
			$body: document.body,
			$sidebarMenu: document.querySelector(".sidebar-menu"),
			$mainMenu: document.querySelector(".main-menu"),
			$mainContent: document.querySelector(".main-content"),
			$userInfoMenu: document.querySelector("nav.user-info-navbar")
		}), setupBackToTop(), setupMousePointer(), setupDarkMode(), setupStarfield(), setupBgImageFallback(),
		setupAppearanceSettings(), setupFooterInfo();
	const e = document.getElementById("dynamic-content-container");
	e && e.addEventListener("click", function(e) {
		const t = e.target.closest(".w-widget.box2");
		t && t.dataset.url && window.open(t.dataset.url, "_blank")
	})
}

function setupBackToTop() {
	const e = document.getElementById("topup"),
		t = document.querySelector(".sidebar-menu-inner");
	if (e) {
		window.addEventListener("scroll", function() {
			window.scrollY >= 50 ? (e.style.display = "block", e.style.opacity = "1", t && t.classList.remove(
				"bgchange")) : (e.style.opacity = "0", e.addEventListener("transitionend", () => {
				window.scrollY < 50 && (e.style.display = "none")
			}, {
				once: !0
			}), t && t.classList.add("bgchange"))
		});
		const n = document.querySelector('a[rel="go-top"]');
		n && n.addEventListener("click", function(e) {
			e.preventDefault(), window.scrollTo({
				top: 0,
				behavior: "smooth"
			})
		})
	}
}

function setupMousePointer() {
	const e = document.body,
		t = document.getElementById("pointer");
	if (t) {
		const s = t.offsetWidth / 2;

		function n(e, n) {
			t.style.transform = `translate(${e-s+19}px, ${n-s+19}px)`
		}
		e.addEventListener("mousemove", e => {
			window.requestAnimationFrame(() => n(e.clientX, e.clientY))
		})
	}
	/Mobi|Tablet|iPad|iPhone|Android/i.test(navigator.userAgent) && t && (t.style.display = "none")
}

function setupDarkMode() {
	const e = e => localStorage.getItem(e),
		t = (e, t) => localStorage.setItem(e, t),
		n = e => {
			const n = document.getElementById("night-mode-tooltip"),
				s = e ? "已切换为夜间模式" : "已切换为日间模式",
				i = e ? "ti ti-moon-filled" : "ti ti-sun-filled",
				o = e ? "夜间模式切换" : "日间模式切换";
			e ? (document.body.classList.add("night"), t("night", "1"), n && (n.innerText = "切换日间模式")) : (document.body
					.classList.remove("night"), t("night", "0"), n && (n.innerText = "切换夜间模式")), "undefined" !=
				typeof iziToast && iziToast.info({
					timeout: 2e3,
					closeOnEscape: !0,
					transitionOut: "fadeOutRight",
					displayMode: "replace",
					layout: 2,
					transitionIn: "bounceInLeft",
					position: "topRight",
					icon: i,
					backgroundColor: "#fff",
					title: o,
					message: s
				})
		},
		s = () => {
			const t = "0" === e("night");
			n(t)
		},
		i = document.getElementById("dark-mode-switch");
	i && i.addEventListener("click", e => {
		e.preventDefault(), s()
	});
	const o = () => {
		const e = (new Date).getHours();
		return e > 18 || e < 7
	};
	window.matchMedia("(prefers-color-scheme: dark)").addEventListener("change", e => n(e.matches));
	const a = e("night");
	n(null === a ? o() : "1" === a)
}

function setupStarfield() {
	function e() {
		function e(e) {
			return 1e3 * Math.random() < 10 * e
		}

		function t(e, t) {
			return Math.random() * (t - e) + e
		}

		function n() {
			r = window.innerWidth, c = window.innerHeight, o.width = r, o.height = c
		}

		function s() {
			a.clearRect(0, 0, r, c), a.globalCompositeOperation = "lighter";
			for (let e of l) e.move(), e.fadeIn(), e.fadeOut(), e.draw();
			requestAnimationFrame(s)
		}

		function i() {
			n(), l = Array.from({
				length: u
			}, () => new m), s(), setTimeout(() => d = !1, 50)
		}
		const o = document.getElementById("starfield");
		if (!o) return;
		const a = o.getContext("2d");
		let r = window.innerWidth,
			c = window.innerHeight,
			l = [],
			d = !0;
		const u = Math.floor(.3 * r),
			p = {
				giant: "180,184,240",
				star: "226,225,142",
				comet: "225,225,225"
			};
		class m {
			constructor() {
				this.reset()
			}
			reset() {
				this.isGiant = e(3), this.isComet = !this.isGiant && !d && e(20), this.x = t(0, r), this.y = t(0,
					c), this.size = t(1.1, 2.6), this.dx = t(.05, .3) + (this.isComet ? t(2.5, 6) : .05), this
					.dy = -t(.05, .3) - (this.isComet ? t(2.5, 6) : .05), this.opacity = 0, this.opacityTarget = t(
						.2, this.isComet ? .6 : 1), this.fadeSpeed = t(5e-4, .002) + (this.isComet ? .001 : 0), this
					.fadingIn = !0, this.fadingOut = !1
			}
			fadeIn() {
				this.fadingIn && (this.opacity += this.fadeSpeed, this.opacity >= this.opacityTarget && (this
					.fadingIn = !1))
			}
			fadeOut() {
				this.fadingOut && (this.opacity -= this.fadeSpeed / 2, this.opacity <= 0 && this.reset())
			}
			move() {
				this.x += this.dx, this.y += this.dy, !this.fadingOut && (this.x > r - r / 4 || this.y < 0) && (this
					.fadingOut = !0)
			}
			draw() {
				if (a.beginPath(), this.isGiant) a.fillStyle = `rgba(${p.giant},${this.opacity})`, a.arc(this.x,
					this.y, 2, 0, 2 * Math.PI);
				else {
					if (this.isComet) {
						a.fillStyle = `rgba(${p.comet},${this.opacity})`, a.arc(this.x, this.y, 2, 0, 2 * Math.PI);
						for (let e = 0; e < 30; e++) {
							const t = this.opacity - this.opacity / 20 * e;
							if (t <= 0) break;
							a.fillStyle = `rgba(${p.comet},${t})`;
							const n = this.x - this.dx / 4 * e,
								s = this.y - this.dy / 4 * e;
							a.rect(n, s - 2, 2, 2), a.fill()
						}
						return
					}
					a.fillStyle = `rgba(${p.star},${this.opacity})`, a.fillRect(this.x, this.y, this.size, this
						.size)
				}
				a.closePath(), a.fill()
			}
		}
		window.addEventListener("resize", n), i()
	}
	e()
}

function setupBgImageFallback() {
	const e = document.body,
		t = window.getComputedStyle(e).backgroundImage.match(/url\("?(.+?)"?\)/);
	if (!t) return;
	const n = t[1],
		s = new Image;
	s.src = n, s.onerror = (() => {
		e.style.background = "#3f5d5c", e.style.backgroundImage = "none", console.warn("背景图片加载失败，已设置为纯色背景")
	})
}

function setupSidebarMenu() {
	function e(e, t) {
		if ("true" === e.dataset.isBusy) return;
		e.dataset.isBusy = "true", e.classList.add("expanded"), t.style.display = "block";
		const n = Array.from(t.children),
			s = gsap.timeline({
				onComplete: () => {
					gsap.set(t, {
						height: "auto",
						overflow: "visible"
					}), e.dataset.isBusy = "false"
				}
			});
		t.scrollHeight;
		s.from(t, {
			height: 0,
			autoAlpha: 1,
			duration: .3,
			ease: "power2.out"
		}), s.from(n, {
			autoAlpha: 0,
			x: -15,
			duration: .2,
			ease: "power2.out",
			stagger: .05
		}, "-=0.25")
	}

	function t(e, t) {
		if ("true" === e.dataset.isBusy) return;
		e.dataset.isBusy = "true", e.classList.remove("expanded");
		const n = Array.from(t.children),
			s = gsap.timeline({
				onComplete: () => {
					gsap.set([t, ...n], {
						clearProps: "all"
					}), e.classList.remove("opened"), e.dataset.isBusy = "false"
				}
			});
		s.to(n, {
			autoAlpha: 0,
			x: -10,
			duration: .15,
			ease: "power2.in",
			stagger: .03
		}), s.to(t, {
			height: 0,
			autoAlpha: 1,
			duration: .25,
			ease: "power2.in"
		}, "-=0.2")
	}
	const {
		$sidebarMenu: n
	} = public_vars;
	if (!n) return;
	const s = n.classList.contains("toggle-others"),
		i = Array.from(n.querySelectorAll("li")).filter(e => e.querySelector(":scope > ul"));
	i.forEach(i => {
		const o = i.querySelector(":scope > a"),
			a = i.querySelector(":scope > ul");
		i.classList.add("has-sub"), o.addEventListener("click", o => {
			if (!n.classList.contains("collapsed")) {
				if (o.preventDefault(), s) {
					const e = Array.from(i.parentElement.children).filter(e => e !== i && e.classList
						.contains("expanded"));
					e.forEach(e => {
						const n = e.querySelector(":scope > ul");
						n && t(e, n)
					})
				}
				i.classList.contains("expanded") ? t(i, a) : e(i, a)
			}
		})
	})
}

function setupSidebarToggles() {
	function e(e) {
		if (i) switch (e) {
			case "largescreen":
				i.classList.remove("collapsed");
				break;
			case "tabletscreen":
				i.classList.add("collapsed")
		}
	}

	function t() {
		const e = window.innerWidth;
		for (const t in public_vars.breakpoints) {
			let [n, s] = public_vars.breakpoints[t];
			if (-1 === s && (s = 1 / 0), e >= n && e <= s) return t
		}
		return null
	}

	function n() {
		const n = t();
		public_vars.lastBreakpoint !== n && (public_vars.lastBreakpoint = n, e(n))
	}
	const {
		$body: s,
		$sidebarMenu: i,
		$mainMenu: o,
		$userInfoMenu: a
	} = public_vars;
	if (document.querySelectorAll('a[data-toggle="sidebar"]').forEach(e => {
			e.addEventListener("click", e => {
				e.preventDefault(), i && i.classList.toggle("collapsed")
			})
		}), document.querySelectorAll('a[data-toggle="mobile-menu"]').forEach(e => {
			e.addEventListener("click", e => {
				e.preventDefault(), o && o.classList.toggle("mobile-is-visible"), i && i.classList.toggle(
					"mobile-is-visible"), s && s.classList.toggle("mobile-is-visible")
			})
		}), document.querySelectorAll('a[data-toggle="user-info-menu"]').forEach(e => {
			e.addEventListener("click", e => {
				e.preventDefault(), a && a.classList.toggle("mobile-is-visible")
			})
		}), a) {
		const e = a.offsetHeight - 1;
		a.querySelectorAll(".user-info-menu > li").forEach(t => {
			t.style.minHeight = `${e}px`
		})
	}
	document.addEventListener("click", function(e) {
		if (e.target.closest(".has-sub")) {
			const t = e.target.closest(".has-sub");
			if (!t.classList.contains("expanded")) {
				const e = t.querySelector("ul");
				e && e.removeAttribute("style")
			}
		}
	}), document.querySelectorAll(".user-info-menu .d-none").forEach(e => {
		e.addEventListener("click", () => {
			i && i.classList.contains("collapsed") ? document.querySelectorAll(".has-sub.expanded > ul")
				.forEach(e => e.removeAttribute("style")) : document.querySelectorAll(
					".has-sub.expanded > ul").forEach(e => e.style.display = "block")
		})
	}), document.querySelectorAll("#main-menu li ul li").forEach(e => {
		e.addEventListener("click", function() {
			Array.from(this.parentElement.children).forEach(e => e.classList.remove("active")), this
				.classList.add("active")
		})
	}), document.querySelectorAll("a.smooth").forEach(e => {
		e.addEventListener("click", function(e) {
			e.preventDefault();
			const t = this.getAttribute("href"),
				n = document.querySelector(t);
			if (!n) return;
			const a = n.offsetTop - 30;
			document.querySelectorAll("#main-menu li").forEach(e => e.classList.remove("active")), this
				.parentElement.classList.add("active"), o && o.classList.remove("mobile-is-visible"),
				i && i.classList.remove("mobile-is-visible"), s && s.classList.remove(
					"mobile-is-visible"), window.scrollTo({
					top: a,
					behavior: "smooth"
				})
		})
	}), window.addEventListener("resize", n), window.addEventListener("orientationchange", n), n()
}

function setupAppearanceSettings() {
	function e(e) {
		let t = 0,
			n = 0,
			s = 0;
		return 4 == e.length ? (t = parseInt(e[1] + e[1], 16), n = parseInt(e[2] + e[2], 16), s = parseInt(e[3] + e[3],
			16)) : 7 == e.length && (t = parseInt(e.substring(1, 3), 16), n = parseInt(e.substring(3, 5), 16), s =
			parseInt(e.substring(5, 7), 16)), `${t}, ${n}, ${s}`
	}

	function t(e) {
		if (!e || "string" != typeof e) return "#ffffff";
		const t = e.split(",").map(e => parseInt(e.trim(), 10));
		return 3 !== t.length || t.some(isNaN) ? "#ffffff" : "#" + t.map(e => {
			const t = e.toString(16);
			return 1 === t.length ? "0" + t : t
		}).join("")
	}
	const n = document.documentElement,
		s = document.getElementById("settings-container"),
		i = ["alpha-slider", "overlay-slider"];
	if (!s) return void console.warn("外观设置控件容器未找到，功能禁用。");
	const o = {
			"overlay-slider": {
				variable: "--overlay-opacity",
				defaults: {
					light: .4,
					night: 0
				},
				unit: ""
			},
			"blur-slider": {
				variable: "--module-blur-value",
				defaults: {
					light: 12,
					night: 0
				},
				unit: "px"
			},
			"alpha-slider": {
				variable: "--module-bg-alpha",
				defaults: {
					light: .1,
					night: .15
				},
				unit: ""
			},
			"palette-main-color-picker": {
				variable: "--palette-main-rgb",
				defaults: {
					light: "255, 255, 255",
					night: "255, 255, 255"
				},
				type: "color"
			}
		},
		a = () => document.body.classList.contains("night") ? "night" : "light",
		r = () => {
			const s = a();
			Object.keys(o).forEach(a => {
				const r = o[a],
					c = document.getElementById(a);
				if (!c) return;
				const l = `${r.variable}-${s}`,
					d = localStorage.getItem(l),
					u = r.defaults.hasOwnProperty(s) ? r.defaults[s] : r.defaults.light;
				let p = null !== d ? d : u;
				if ("color" === r.type) {
					let s, i;
					d ? d.startsWith("#") ? (i = d, s = e(d)) : (i = t(d), s = d) : u.startsWith("#") ? (i = u,
							s = e(u)) : (i = t(u), s = u), n.style.setProperty(r.variable, s), c.value = i, c
						.nextElementSibling && (c.nextElementSibling.textContent = i.toUpperCase())
				} else if (n.style.setProperty(r.variable, p + (r.unit || "")), c.value = p, c
					.nextElementSibling) {
					const e = i.includes(c.id) ? 2 : 0;
					c.nextElementSibling.textContent = parseFloat(p).toFixed(e)
				}
			})
		};
	s.addEventListener("click", function(e) {
		const t = e.target.closest(".suspension_box");
		if (t) {
			if (e.stopPropagation(), "settings-toggle" === t.id) return this.classList.toggle("open"), void(this
				.classList.contains("open") || (this.querySelectorAll(".control-slider-panel.visible")
					.forEach(e => e.classList.remove("visible")), this.classList.remove("hide-tooltips")
					));
			if (t.classList.contains("suspension_control")) {
				const e = document.getElementById(`${t.dataset.control}-panel`);
				if (!e) return;
				const n = e.classList.contains("visible");
				this.querySelectorAll(".control-slider-panel").forEach(e => e.classList.remove("visible")), n ||
					e.classList.add("visible");
				const s = null !== this.querySelector(".control-slider-panel.visible");
				this.classList.toggle("hide-tooltips", s)
			}
		}
	}), document.querySelectorAll(".control-slider").forEach(e => {
		e.addEventListener("input", function() {
			const e = this.dataset.variable,
				t = this.dataset.unit || "",
				s = this.value;
			if (n.style.setProperty(e, s + t), this.nextElementSibling) {
				const e = i.includes(this.id) ? 2 : 0;
				this.nextElementSibling.textContent = parseFloat(s).toFixed(e)
			}
			const o = `${e}-${a()}`;
			localStorage.setItem(o, s)
		}), e.closest(".control-slider-panel").addEventListener("click", e => e.stopPropagation())
	}), document.querySelectorAll(".color-picker").forEach(t => {
		t.addEventListener("input", function() {
			const t = this.dataset.variable,
				s = this.value,
				i = e(s);
			n.style.setProperty(t, i);
			const o = `${t}-${a()}`;
			localStorage.setItem(o, s), this.nextElementSibling && (this.nextElementSibling
				.textContent = s.toUpperCase())
		}), t.closest(".control-slider-panel").addEventListener("click", e => e.stopPropagation())
	}), document.addEventListener("click", function() {
		s.classList.contains("open") && (s.classList.remove("open", "hide-tooltips"), s.querySelectorAll(
			".control-slider-panel.visible").forEach(e => e.classList.remove("visible")))
	}), new MutationObserver(() => {
		r()
	}).observe(document.body, {
		attributes: !0,
		attributeFilter: ["class"]
	}), r()
}

function setupFooterInfo() {
	function e() {
		clearTimeout(r);
		const t = new Date,
			n = ["日", "一", "二", "三", "四", "五", "六"],
			s = t.getHours().toString().padStart(2, "0"),
			i = t.getMinutes().toString().padStart(2, "0"),
			o = t.getSeconds().toString().padStart(2, "0"),
			a = document.getElementById("times");
		a && (a.innerHTML =
			`${t.getFullYear()}.${t.getMonth()+1}.${t.getDate()} <span class='weekday'>星期${n[t.getDay()]}</span><br/><span class='time-text'>${s}:${i}:${o}</span>`
			), r = setTimeout(e, 1e3)
	}
	const t = "b77924d833a905c383b440640c44f8a8",
		n = document.getElementById("weather-widget"),
		s = document.getElementById("city_text"),
		i = document.getElementById("wea_text"),
		o = document.getElementById("temp_text"),
		a = document.getElementById("wind_text");
	fetch(`https://restapi.amap.com/v3/ip?key=${t}`).then(e => {
		if (!e.ok) throw new Error(`IP定位API网络错误: ${e.status}`);
		return e.json()
	}).then(e => {
		if ("1" !== e.status) throw new 错误(`IP定位API返回错误: ${e。info}`);
		const n = e.adcode;
		if (!n) throw new Error("无法获取有效城市编码。");
		return fetch(`https://restapi.amap.com/v3/weather/weatherInfo?key=${t}&city=${n}&extensions=all`).then(
			e => e.json()).then(t => ({
			ipData: e,
			weatherData: t
		}))
	}).then(({
		ipData: e,
		weatherData: t
	}) => {
		if ("1" !== t.status || !t.forecasts || 0 === t.forecasts.length) throw new Error(
			`天气API返回错误或无数据: ${t.info}`);
		const r = t.forecasts[0].casts[0];
		s && (s.textContent = e.city), i && (i.textContent = r.dayweather), o && (o.innerHTML =
			`${r.nighttemp}&deg;C~${r.daytemp}&deg;C`), a && (a.textContent =
			`${r.daywind}风 ${r.daypower}级`), n && n.classList.add("loaded")
	}).catch(e => {
		console.error("获取高德天气失败:", e), i && (i.textContent = "天气加载失败"), s && (s.textContent = ""), o && (o
			.textContent = ""), a && (a.textContent = ""), n && n.classList.add("loaded")
	});
	let r = null;
	e();
	const c = document.getElementById("time");
	c && performance.now() && (c.innerHTML = ` 页面加载耗时 ${Math.round(performance.now())} 毫秒 `), fetch("/cdn-cgi/trace")
		.then(e => e.text()).then(e => {
			const t = Object.fromEntries(e.trim().split("\n").map(e => e.split("="))),
				n = document.getElementById("result");
			n && (n.innerHTML = `节点:${t.colo} | 访客:${t.loc} | IP:${t.ip}`)
		}), console.clear();
	const l = "font-size: 20px; font-weight: 600; color: rgb(244, 167, 89);",
		d = "font-size: 16px; color: rgb(244, 167, 89);",
		u = "color: rgb(30, 152, 255);",
		p =
		"\n==============================\n#   #    #   #   # #   # #####\n#   #   # #   # #  ##  # #\n# # #  #####   #   # # # #####\n## ##  #   #   #   #  ## #\n#   #  #   #   #   #   # #####\n==============================\n",
		m =
		"\n版 本 号：v8.1.1\n更新日期：2025-09-10\n\nWayneのNav: https://nav.3301.qzz.io/\nGithub:  https://github.com/Waynenet/Wayne-Nav\n";
	console.log(`%cWayneのNav %c${p} %c${m}`, l, d, u)
}
const public_vars = {
	$body: null,
	$sidebarMenu: null,
	$mainMenu: null,
	$mainContent: null,
	$userInfoMenu: null,
	breakpoints: {
		largescreen: [991, -1],
		tabletscreen: [768, 990],
		devicescreen: [420, 767],
		sdevicescreen: [0, 419]
	},
	lastBreakpoint: null
};
document.addEventListener("DOMContentLoaded", function() {
	renderContent(), initializePageFunctions()
});
